# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10XQBsRVvw8cxGAF5mywcoZhoIwEfVfWL
"""

# Question 9: Distance Matrix Calculation
# Create a function named calculate_distance_matrix that takes the dataset-2.csv as input and generates a DataFrame representing distances between IDs.import pandas as pd

import numpy as np

def calculate_distance_matrix(file_path):

    df = pd.read_csv(file_path)

    print("Columns in the DataFrame:", df.columns)


    df.columns = df.columns.str.strip()


    if 'id_start' not in df.columns or 'id_end' not in df.columns or 'distance' not in df.columns:

        raise KeyError("The required columns 'id_start', 'id_end', and 'distance' must be present in the CSV file.")

    ids = pd.unique(df[['id_start', 'id_end']].values.ravel('K'))

    distance_matrix = pd.DataFrame(np.inf, index=ids, columns=ids)

    for _, row in df.iterrows():
        distance_matrix.loc[row['id_start'], row['id_end']] = row['distance']
        distance_matrix.loc[row['id_end'], row['id_start']] = row['distance']  # Ensure symmetry

    np.fill_diagonal(distance_matrix.values, 0)


    for k in ids:
        for i in ids:
            for j in ids:
                if distance_matrix.loc[i, k] + distance_matrix.loc[k, j] < distance_matrix.loc[i, j]:
                    distance_matrix.loc[i, j] = distance_matrix.loc[i, k] + distance_matrix.loc[k, j]

    return distance_matrix


distance_matrix = calculate_distance_matrix('dataset-2.csv')
print(distance_matrix)

df = pd.DataFrame(distance_matrix)

df.to_csv('distance_matrix.csv')

# Question 10: Unroll Distance Matrix
# Create a function unroll_distance_matrix that takes the DataFrame created in Question 9. The resulting DataFrame should have three columns: columns id_start, id_end, and distance.

df = pd.read_csv("/content/distance_matrix.csv")

def unroll_distance_matrix(df) -> pd.DataFrame:

    unrolled_df = pd.DataFrame(columns=['id_start', 'id_end', 'distance'])

    for i in df.columns:

        for j in df.columns:

            if i != j:
                unrolled_df = unrolled_df.append({'id_start': i, 'id_end': j, 'distance': df.loc[i, j]}, ignore_index=True)



print(unrolled_df)

df = pd.DataFrame(unrolled_df)

df.to_csv('unrolled_df.csv')

df = pd.DataFrame(unrolled_df)

# Save the DataFrame to a CSV file
df.to_csv('unrolled_df.csv')

# Question 11: Finding IDs within Percentage Threshold

import pandas as pd

def find_ids_within_ten_percentage_threshold(unrolled_df, reference_value):

    ref_df = unrolled_df[unrolled_df['id_start'] == reference_value]


    avg_distance = ref_df['distance'].mean()


    lower_bound = avg_distance * 0.90

    upper_bound = avg_distance * 1.10


    valid_ids_df = unrolled_df.groupby('id_start').filter(
        lambda x: lower_bound <= x['distance'].mean() <= upper_bound
    )


    return sorted(valid_ids_df['id_start'].unique())

valid_ids = find_ids_within_ten_percentage_threshold(unrolled_df, reference_value)

print(valid_ids)

# Question 12: Calculate Toll Rate
# Create a function calculate_toll_rate that takes the DataFrame created in Question 10 as input and calculates toll rates based on vehicle types.

# The resulting DataFrame should add 5 columns to the input DataFrame: moto, car, rv, bus, and truck with their respective rate coefficients. The toll rates should be calculated by multiplying the distance with the given rate coefficients for each vehicle type:

# 0.8 for moto
# 1.2 for car
# 1.5 for rv
# 2.2 for bus
# 3.6 for truck

import pandas as pd

def calculate_toll_rate(unrolled_df):

    rates = {
        'moto': 0.8,
        'car': 1.2,
        'rv': 1.5,
        'bus': 2.2,
        'truck': 3.6
    }


    unrolled_df['moto'] = unrolled_df['distance'] * rates['moto']
    unrolled_df['car'] = unrolled_df['distance'] * rates['car']
    unrolled_df['rv'] = unrolled_df['distance'] * rates['rv']
    unrolled_df['bus'] = unrolled_df['distance'] * rates['bus']
    unrolled_df['truck'] = unrolled_df['distance'] * rates['truck']

    return unrolled_df


unrolled_df_with_toll = calculate_toll_rate(unrolled_df)

print(unrolled_df_with_toll.head())

df = pd.DataFrame(unrolled_df_with_toll)

df.to_csv('unrolled_df_with_toll.csv')

# Question 13: Calculate Time-Based Toll Rates
# Create a function named calculate_time_based_toll_rates that takes the DataFrame created in Question 12 as input and calculates toll rates for different time intervals within a day.

# The resulting DataFrame should have these five columns added to the input: start_day, start_time, end_day, and end_time.

# start_day, end_day must be strings with day values (from Monday to Sunday in proper case)
# start_time and end_time must be of type datetime.time() with the values from time range given below.
# Modify the values of vehicle columns according to the following time ranges:

# Weekdays (Monday - Friday):

# From 00:00:00 to 10:00:00: Apply a discount factor of 0.8
# From 10:00:00 to 18:00:00: Apply a discount factor of 1.2
# From 18:00:00 to 23:59:59: Apply a discount factor of 0.8
# Weekends (Saturday and Sunday):

# Apply a constant discount factor of 0.7 for all times.
# For each unique (id_start, id_end) pair, cover a full 24-hour period (from 12:00:00 AM to 11:59:59 PM) and span all 7 days of the week (from Monday to Sunday).

from datetime import time

def calculate_time_based_toll_rates(df):

    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
    weekends = ['Saturday', 'Sunday']

    time_intervals = [
        (time(0, 0), time(10, 0), 0.8),
        (time(10, 0), time(18, 0), 1.2),
        (time(18, 0), time(23, 59, 59), 0.8)
    ]

    weekend_discount = 0.7


    for start_day in weekdays + weekends:
        for start_time, end_time, discount in time_intervals:

            mask = (
                (df['start_day'] == start_day) &
                (df['start_time'] >= start_time) &
                (df['end_time'] <= end_time)
            )

            df.loc[mask, 'vehicle'] *= discount


    for start_day in weekends:
        df.loc[df['start_day'] == start_day, 'vehicle'] *= weekend_discount

    return df

